{
  
    
        "post0": {
            "title": "Ligand SASA in Protein Pocket",
            "content": "Motivation . Solvent-accessible surface area (SASA) is an important descriptor in ligand binding. The extent of ligand SASA value decrease upon binding indicates whether the ligand is deeply buried or not upon binding to the pocket. RDKit provides SASA value calculation, which is based on FreeSASA package. . %matplotlib inline import matplotlib.pyplot as plt from io import BytesIO import pandas as pd import numpy as np from rdkit.Chem import PandasTools from rdkit import Chem from rdkit.Chem import AllChem from rdkit.Chem import DataStructs from rdkit.Chem import rdMolDescriptors from rdkit.Chem import rdRGroupDecomposition from rdkit.Chem.Draw import IPythonConsole #Needed to show molecules from rdkit.Chem import Draw from rdkit.Chem import rdDepictor from rdkit.Chem.Draw import rdMolDraw2D from rdkit.Chem.Draw.MolDrawing import MolDrawing, DrawingOptions #Only needed if modifying defaults DrawingOptions.bondLineWidth=1.8 IPythonConsole.ipython_useSVG=True from rdkit import RDLogger RDLogger.DisableLog(&#39;rdApp.warning&#39;) import rdkit import py3Dmol print(rdkit.__version__) . . 2020.03.2 . Example . Let&#39;s use ABL2-Imatinib complex (PDB:3GVU) for an example. I first downloaded the file and removed the water and the bound ligands. . prot = Chem.MolFromPDBFile(&#39;files/3gvu.pdb&#39;) lig = Chem.MolFromMolFile(&#39;files/STI.sdf&#39;) viewer = py3Dmol.view(width=300, height=300) viewer.addModel(Chem.MolToPDBBlock(prot), &#39;mol&#39;) viewer.addModel(Chem.MolToPDBBlock(lig), &#39;pdb&#39;) viewer.setStyle({&#39;chain&#39;: &#39;A&#39;}, {&#39;cartoon&#39;:{&#39;color&#39;:&#39;spectrum&#39;}}) viewer.setStyle({&#39;resn&#39;: &#39;UNL&#39;}, {&#39;stick&#39;:{}}) viewer.zoomTo({&#39;resn&#39;: &#39;UNL&#39;}) viewer.show() . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . Let&#39;s define a function that compute SASA. The code is taken from here . from rdkit.Chem import rdFreeSASA # compute ligand SASA lig_h = Chem.AddHs(lig, addCoords=True) # Get Van der Waals radii (angstrom) ptable = Chem.GetPeriodicTable() radii = [ptable.GetRvdw(atom.GetAtomicNum()) for atom in lig_h.GetAtoms()] # Compute solvent accessible surface area lig_sasa = rdFreeSASA.CalcSASA(lig_h, radii) . comp = Chem.CombineMols(prot, lig) comp_h = Chem.AddHs(comp, addCoords=True) # Get Van der Waals radii (angstrom) ptable = Chem.GetPeriodicTable() radii = [ptable.GetRvdw(atom.GetAtomicNum()) for atom in comp_h.GetAtoms()] # Compute solvent accessible surface area comp_sasa = rdFreeSASA.CalcSASA(comp_h, radii) . print(lig_sasa, comp_sasa) . 849.5659988403745 14213.44708409188 . Note that comp_sasa is the overall SASA of both protein and ligand. We want to compute the SASA of ligand only while in the binding pocket. RDKit stores the per-atom SASA values in the atom object. . comp_lig = Chem.GetMolFrags(comp_h, asMols=True)[-1] # ligand is the last component lig_sasa_free = 0 for a in lig_h.GetAtoms(): lig_sasa_free += float(a.GetProp(&quot;SASA&quot;)) lig_sasa_bound = 0 for a in comp_lig.GetAtoms(): lig_sasa_bound += float(a.GetProp(&quot;SASA&quot;)) . print(&quot;Ligand SASA (free) =&quot;, lig_sasa_free) print(&quot;Ligand SASA (bound) =&quot;, lig_sasa_bound) print(&quot;Ligand SASA difference =&quot;, lig_sasa_free - lig_sasa_bound) . Ligand SASA (free) = 849.5659988403745 Ligand SASA (bound) = 68.71464272335984 Ligand SASA difference = 780.8513561170147 . Reduce computation time . Let&#39;s put above in a functional call and measure the timing. . from rdkit.Chem import rdFreeSASA def compute_sasa(mol): # Get Van der Waals radii (angstrom) ptable = Chem.GetPeriodicTable() radii = [ptable.GetRvdw(atom.GetAtomicNum()) for atom in mol.GetAtoms()] # Compute solvent accessible surface area sasa = rdFreeSASA.CalcSASA(mol, radii) return sasa def compute_ligand_sasa_pocket(prot, lig): # compute complex SASA comp = Chem.CombineMols(prot, lig) comp_h = Chem.AddHs(comp, addCoords=True) comp_sasa = compute_sasa(comp_h) # compute ligand SASA in pocket comp_lig = Chem.GetMolFrags(comp_h, asMols=True, sanitizeFrags=False)[-1] # ligand is the last component lig_sasa_bound = sum([float(a.GetProp(&quot;SASA&quot;)) for a in comp_lig.GetAtoms()]) return lig_sasa_bound . sasa_free = compute_sasa(lig) sasa_bound = compute_ligand_sasa_pocket(prot, lig) print(&quot;Ligand SASA (free) =&quot;, sasa_free) print(&quot;Ligand SASA (bound) =&quot;, sasa_bound) print(&quot;Ligand SASA difference =&quot;, sasa_free - sasa_bound) . Ligand SASA (free) = 767.8208065148369 Ligand SASA (bound) = 68.71464272335984 Ligand SASA difference = 699.1061637914771 . Let&#39;s measure the timing of this function call. I suspect this is not particularly fast because the code needs to compute SASA of all protein atoms as well. Perhaps we can make this faster by only computing SASA within certain distance from the ligand atoms. . %timeit compute_ligand_sasa_pocket(prot, lig) . 323 ms ± 1.39 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) . def compute_ligand_sasa_pocket_cutoff(prot, lig, cutoff=8): lig_conf = lig.GetConformer() lig_xyz = lig_conf.GetPositions() prot_conf = prot.GetConformer() prot_xyz = conf.GetPositions() # minimum distance between protein atoms and ligand atoms r = np.min(np.linalg.norm(prot_xyz[:, np.newaxis, :] - lig_xyz[np.newaxis, :, :], axis=2), axis=1) indices = np.argwhere(r &gt; cutoff).flatten() mol = Chem.RWMol(prot) for idx in sorted(indices, reverse=True): mol.RemoveAtom(int(idx)) return compute_ligand_sasa_pocket(mol, lig) . sasa_free = compute_sasa(lig) sasa_bound = compute_ligand_sasa_pocket_cutoff(prot, lig, 5) print(&quot;Ligand SASA (free) =&quot;, sasa_free) print(&quot;Ligand SASA (bound) =&quot;, sasa_bound) print(&quot;Ligand SASA difference =&quot;, sasa_free - sasa_bound) . Ligand SASA (free) = 767.8208065148369 Ligand SASA (bound) = 89.35880016654482 Ligand SASA difference = 678.4620063482921 . With the cutoff distance of 5 Å, we get slightly larger SASA value in the bound state. We can improve this by increasing the cutoff distance. . cutoff_values = [5, 6, 7, 8, 9, 10] sasa_bound_values = [compute_ligand_sasa_pocket_cutoff(prot, lig, c) for c in cutoff_values] plt.plot(cutoff_values, sasa_bound_values) plt.xlabel(&#39;Cutoff&#39;) plt.ylabel(&#39;SASA&#39;) plt.show() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-02-05T11:44:10.373090 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ The SASA value converged after 7 Å cutoff. Let&#39;s compute the function call speed using 8 Å as cutoff. . %timeit compute_ligand_sasa_pocket_cutoff(prot, lig, 8) . 229 ms ± 20.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each) . In my laptop, I got 323 ms (without cutoff) vs 229 ms (with cutoff), which represents about 40% speedup. .",
            "url": "https://sunhwan.github.io/blog/jupyter/2021/02/04/RDKit-Protein-Ligand-SASA.html",
            "relUrl": "/jupyter/2021/02/04/RDKit-Protein-Ligand-SASA.html",
            "date": " • Feb 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Build 3D coordinates of congeneric series",
            "content": "Motivation . I often have to modify a given molecule to introduce a set of modification to make congeneric series. AllChem.ConstrainedEmbed in RDKit could provide such function. See below blog posts for an example: . http://rdkit.blogspot.com/2013/12/using-allchemconstrainedembed.html | https://iwatobipen.wordpress.com/2019/06/04/constrain-embedding-with-mcs-as-a-core-rdkit-chemoinformatics/ | https://www.blopig.com/blog/2019/06/constrained-embedding-with-rdkit/ | . However, AllChem.ConstrinedEmbed uses MCS algorithm, and the MCS sometimes did not yielded the core that I desired, which resulted in a completely wrong alignment between the parent and the newly modified molecule. . So, I wrote a small function that takes the SMARTS pattern, and explicitly takes the coordinates then embed the rest of the coordinates. . from io import BytesIO import pandas as pd import numpy as np from rdkit.Chem import PandasTools from rdkit import Chem from rdkit.Chem import AllChem from rdkit.Chem import DataStructs from rdkit.Chem import rdMolDescriptors from rdkit.Chem import rdRGroupDecomposition from rdkit.Chem.Draw import IPythonConsole #Needed to show molecules from rdkit.Chem import Draw from rdkit.Chem import rdDepictor from rdkit.Chem.Draw import rdMolDraw2D from rdkit.Chem.Draw.MolDrawing import MolDrawing, DrawingOptions #Only needed if modifying defaults DrawingOptions.bondLineWidth=1.8 IPythonConsole.ipython_useSVG=True from rdkit import RDLogger RDLogger.DisableLog(&#39;rdApp.warning&#39;) import rdkit import py3Dmol print(rdkit.__version__) . . 2020.03.2 . Example . Let&#39;s use Imatinib for the parent molecule as an example. . imatinib = Chem.MolFromMolFile(&#39;files/STI.sdf&#39;) imatinib_2d = Chem.RemoveHs(imatinib) AllChem.Compute2DCoords(imatinib_2d) imatinib_2d . N N N NH HN O N N And suppose we want to replace the piperazine to a phenyl. . mol_new = Chem.MolFromSmiles(&#39;Cc1ccc(NC(=O)c2ccc(c3ccccc3)cc2)cc1Nc1nccc(-c2cccnc2)n1&#39;) mol_new . HN O NH N N N SMARTS Pattern . smarts = &#39;[#6]1:[#6]:[#7]:[#6]:[#6](:[#6]:1)-[#6]1:[#7]:[#6](:[#7]:[#6]:[#6]:1)-[#7]-[#6]1:[#6]:[#6](:[#6]:[#6]:[#6]:1-[#6])-[#7]-[#6](-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1))=[#8]&#39; p = Chem.MolFromSmarts(smarts) p . N N N N N O imatinib_2d.GetSubstructMatch(p) imatinib_2d . N N N NH HN O N N mol_new.GetSubstructMatch(p) mol_new . HN O NH N N N Build the new conformer . from rdkit.Chem import rdFMCS from rdkit.Chem import rdDistGeom from rdkit.Chem.rdForceFieldHelpers import UFFGetMoleculeForceField def build(ref, m, smarts): mol = Chem.AddHs(m) p = Chem.MolFromSmarts(smarts) match1 = ref.GetSubstructMatch(p) match2 = mol.GetSubstructMatch(p) coordMap = {} coreConf = ref.GetConformer(0) for i, idxI in enumerate(match2): corePtI = coreConf.GetAtomPosition(match1[i]) coordMap[idxI] = corePtI algMap = [(j, match1[i]) for i, j in enumerate(match2)] tdist = 0.25 confid = AllChem.EmbedMolecule(mol, coordMap=coordMap) rms = AllChem.AlignMol(mol, ref, atomMap=algMap) ff = UFFGetMoleculeForceField(mol, confId=0) conf = ref.GetConformer() for i in range(len(match1)): p = conf.GetAtomPosition(match1[i]) pIdx = ff.AddExtraPoint(p.x, p.y, p.z, fixed=True) - 1 ff.AddDistanceConstraint(pIdx, match2[i], 0, tdist, 100.) ff.Initialize() n = 4 more = ff.Minimize(energyTol=1e-4, forceTol=1e-3) while more and n: more = ff.Minimize(energyTol=1e-4, forceTol=1e-3) n -= 1 # realign rms = AllChem.AlignMol(mol, ref, atomMap=algMap) return mol . mol_new = build(imatinib, mol_new, smarts) . You can see the new molecule have very similar coordinates except the newly added phenyl ring in 3D. . viewer = py3Dmol.view(width=300, height=300) viewer.addModel(Chem.MolToMolBlock(imatinib), &#39;mol&#39;) viewer.addModel(Chem.MolToMolBlock(mol_new), &#39;mol&#39;) viewer.setStyle({&quot;stick&quot;:{}}) viewer.zoomTo() viewer.show() . You appear to be running in JupyterLab (or JavaScript failed to load for some other reason). You need to install the 3dmol extension: jupyter labextension install jupyterlab_3dmol . Note you can perform a fragment grafting instead of embedding. See https://pschmidtke.github.io/blog/rdkit/3d-editor/2021/01/23/grafting-fragments.html .",
            "url": "https://sunhwan.github.io/blog/jupyter/2021/01/29/RDKit-Embed-Congeneric-Series.html",
            "relUrl": "/jupyter/2021/01/29/RDKit-Embed-Congeneric-Series.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sunhwan.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sunhwan.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sunhwan.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

  
  

}